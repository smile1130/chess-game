{
  "name": "chess.js",
  "version": "0.1.0",
  "description": "A Javascript chess library for chess move generation/validation, piece placement/movement, and check/checkmate/draw detection",
  "author": {
    "name": "Jeff Hlywa",
    "email": "jhlywa@gmail.com",
    "url": "https://github.com/jhlywa"
  },
  "contributors": [
    {
      "name": "Steve Bragg",
      "url": "https://github.com/2sb18"
    },
    {
      "name": "E. Azer Ko√ßulu",
      "url": "https://github.com/azer"
    },
    {
      "name": "Falco Nogatz",
      "url": "https://https://github.com/fnogatz"
    }
  ],
  "keywords": [
    "chess"
  ],
  "main": "chess.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/jhlywa/chess.js.git"
  },
  "readme": "# chess.js\n\nchess.js is a Javascript chess library that is used for chess move generation/validation,\npiece placement/movement, and check/checkmate/stalemate detection - basically everything\nbut the AI.\n\nUsing chess.js in a browser is straight-forward:\n    \n    <script type=\"text/javascript\" src=\"chess.js\"></script>\n    <script type=\"text/javascript\">\n\n      var chess = new Chess();\n      ...\n\n    </script>\n\nUsing chess.js in node.js is equally easy:\n\n    var ch = require('/chess.js')\n\n    var chess = new ch.Chess();\n    ...\n## Example Code\nThe code below plays a complete game of chess ... randomly.\n\n    var sys = require('sys'),\n        ch =  require('./chess');\n\n    var chess = new ch.Chess();\n\n    while (!chess.game_over()) {\n      sys.puts('position: ' + chess.fen());\n      var moves = chess.moves();\n      var move = moves[Math.floor(Math.random() * moves.length)];\n      chess.move(move);\n      sys.puts('move: ' + move);\n    }\n\n\n## API\n\n### Constructor: Chess([ fen ])\nThe Chess() constructor takes a optional parameter which specifies the board configuration\nin [Forsyth-Edwards Notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).\n\n    // board defaults to the starting position when called with no parameters\n    var chess = new Chess();\n\n    // pass in a FEN string to load a particular position\n    var chess = new Chess('r1k4r/p2nb1p1/2b4p/1p1n1p2/2PP4/3Q1NB1/1P3PPP/R5K1 b - c3 0 19');\n\n### .ascii()\nReturns a string containing an ASCII diagram of the current position.\n\n    var chess = new Chess();\n\n    // make some moves\n    chess.move('e4');\n    chess.move('e5');\n    chess.move('f4');\n\n    chess.ascii();\n    // -> '   +------------------------+\n    //      8 | r  n  b  q  k  b  n  r |\n    //      7 | p  p  p  p  .  p  p  p |\n    //      6 | .  .  .  .  .  .  .  . |\n    //      5 | .  .  .  .  p  .  .  . |\n    //      4 | .  .  .  .  P  P  .  . |\n    //      3 | .  .  .  .  .  .  .  . |\n    //      2 | P  P  P  P  .  .  P  P |\n    //      1 | R  N  B  Q  K  B  N  R |\n    //        +------------------------+\n    //          a  b  c  d  e  f  g  h'\n\n### .clear()\nClears the board.\n\n    chess.clear();\n    chess.fen();\n    // -> '8/8/8/8/8/8/8/8 w - - 0 1' <- empty board\n\n### .fen()\nReturns the FEN string for the current position.\n\n    var chess = new Chess();\n\n    // make some moves\n    chess.move('e4');\n    chess.move('e5');\n    chess.move('f4');\n\n    chess.fen();\n    // -> 'rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2'\n\n### .game_over() \nReturns true or false if the game has ended via checkmate, stalemate, or draw.\n\n    var chess = new Chess();\n    chess.game_over();\n    // -> false\n\n    chess.load('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78');\n    chess.game_over();\n    // -> true (stalemate)\n\n    chess.load('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\n    chess.game_over();\n    // -> true (checkmate)\n\n### .get(square)\nReturns the piece on the square:\n\n    chess.clear();\n    chess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n\n    chess.get('a5');\n    // -> { type: 'p', color: 'b' },\n    chess.get('a6');\n    // -> null\n\n### .history([ options ])\nReturns a list containing the moves of the current game.  Options is an optional\nparameter which may contain a 'verbose' flag.  See .moves() for a description of the\nverbose move fields.\n\n    var chess = new Chess();\n    chess.move('e4');\n    chess.move('e5');\n    chess.move('f4');\n    chess.move('exf4');\n    \n    chess.history();\n    // -> ['e4', 'e5', 'f4', 'exf4']\n\n    chess.history({ verbose: true });\n    // -> [{ color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' },\n    //     { color: 'b', from: 'e7', to: 'e5', flags: 'b', piece: 'p', san: 'e5' },\n    //     { color: 'w', from: 'f2', to: 'f4', flags: 'b', piece: 'p', san: 'f4' },\n    //     { color: 'b', from: 'e5', to: 'f4', flags: 'c', piece: 'p', captured: 'p', san: 'exf4' }]\n\n### .in_check() \nReturns true or false if the side to move is in check.\n\n    var chess = new Chess('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\n    chess.in_check();\n    // -> true\n\n### .in_checkmate() \nReturns true or false if the side to move has been checkmated.\n\n    var chess = new Chess('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\n    chess.in_checkmate();\n    // -> true\n\n### .in_draw() \nReturns true or false if the game is drawn (50-move rule or insufficient material).\n\n    var chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78');\n    chess.in_draw();\n    // -> true\n\n### .in_stalemate() \nReturns true or false if the side to move has been stalemated.\n\n    var chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78');\n    chess.in_stalemate();\n    // -> true\n\n### .in_threefold_repetition() \nReturns true or false if the current board position has occurred three or more\ntimes.\n\n    var chess = new Chess('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n    // -> true\n    // rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 1st time\n    chess.in_threefold_repetition();\n    // -> false\n\n    chess.move('Nf3'); chess.move('Nf6') chess.move('Ng1'); chess.move('Ng8');\n    // rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 2nd time\n    chess.in_threefold_repetition();\n    // -> false\n\n    chess.move('Nf3'); chess.move('Nf6') chess.move('Ng1'); chess.move('Ng8');\n    // rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 3rd time\n    chess.in_threefold_repetition();\n    // -> true\n\n### .header()\nAllows header information to be added to PGN output. Any number of key/value\npairs can be passed to .header().\n\n    chess.header('White', 'Robert James Fischer');\n    chess.header('Black', 'Mikhail Tal');\n\n    // or\n\n    chess.header('White', 'Morphy', 'Black', 'Anderssen', 'Date', '1858-??-??');\n\n### .insufficient_material() \nReturns true if the game is drawn due to insufficient material (K vs. K,\nK vs. KB, or K vs. KN); otherwise false.\n\n    var chess = new Chess('k7/8/n7/8/8/8/8/7K b - - 0 1');\n    chess.insufficient_material()\n    // -> true\n\n### .load(fen)\nThe board is cleared and the FEN string is loaded.  Returns true if position was\nsuccessfully loaded, otherwise false.\n\n    var chess = new Chess();\n    chess.load('4r3/8/2p2PPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45');\n    // -> true\n    \n    chess.load('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45');\n    // -> false, bad piece X\n\n### .load_pgn(pgn, [ options ])\nLoad the moves of a game stored in \n[Portal Game Notation](http://en.wikipedia.org/wiki/Portable_Game_Notation).\nOptions is a optional parameter that contains a 'newline_char' denoting the line\ndelimiter (the default delimiter is '\\n').  Returns true if the PGN was parsed\nsuccessfully, otherwise false.\n\n    var chess = new Chess();\n    pgn = ['[Event \"Casual Game\"]',\n           '[Site \"Berlin GER\"]',\n           '[Date \"1852.??.??\"]',\n           '[EventDate \"?\"]',\n           '[Round \"?\"]',\n           '[Result \"1-0\"]',\n           '[White \"Adolf Anderssen\"]',\n           '[Black \"Jean Dufresne\"]',\n           '[ECO \"C52\"]',\n           '[WhiteElo \"?\"]',\n           '[BlackElo \"?\"]',\n           '[PlyCount \"47\"]',\n           '',\n           '1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.b4 Bxb4 5.c3 Ba5 6.d4 exd4 7.O-O',\n           'd3 8.Qb3 Qf6 9.e5 Qg6 10.Re1 Nge7 11.Ba3 b5 12.Qxb5 Rb8 13.Qa4',\n           'Bb6 14.Nbd2 Bb7 15.Ne4 Qf5 16.Bxd3 Qh5 17.Nf6+ gxf6 18.exf6',\n           'Rg8 19.Rad1 Qxf3 20.Rxe7+ Nxe7 21.Qxd7+ Kxd7 22.Bf5+ Ke8',\n           '23.Bd7+ Kf8 24.Bxe7# 1-0'];\n\n    chess.load_pgn(pgn.join('\\n'));\n    // -> true\n\n    chess.fen()\n    // -> 1r3kr1/pbpBBp1p/1b3P2/8/8/2P2q2/P4PPP/3R2K1 b - - 0 24\n\n    chess.ascii() \n    // -> '  +------------------------+\n    //     8 | .  r  .  .  .  k  r  . |\n    //     7 | p  b  p  B  B  p  .  p |\n    //     6 | .  b  .  .  .  P  .  . |\n    //     5 | .  .  .  .  .  .  .  . |\n    //     4 | .  .  .  .  .  .  .  . |\n    //     3 | .  .  P  .  .  q  .  . |\n    //     2 | P  .  .  .  .  P  P  P |\n    //     1 | .  .  .  R  .  .  K  . |\n    //       +------------------------+\n    //         a  b  c  d  e  f  g  h'\n\n### .move(move)\nAttempts to make a move on the board, returning a move object if the move was\nlegal, otherwise null.  The .move function can be called two ways, by passing\na string in Standard Algebraic Notation (SAN):\n\n    var chess = new Chess();\n\n    chess.move('e4') \n    // -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e2' }\n\n    chess.move('nf6') // SAN is case sensitive!!\n    // -> null\n\n    chess.move('Nf6')\n    // -> { color: 'b', from: 'g8', to: 'f6', flags: 'n', piece: 'n', san: 'Nf6' }\n\nOr by passing .move() a move object (only the 'to', 'from', and when necessary\n'promotion', fields are needed):\n\n    var chess = new Chess();\n\n    chess.move({ from: 'g2', to: 'g3' });\n    // -> { color: 'w', from: 'g2', to: 'g3', flags: 'n', piece: 'p', san: 'g3' }\n\n### .moves([ options ])\nReturns a list of all legal moves from the current position.  The function be passed a options hash which controls the verbosity of the return values (this may change in the future).\n\n    var chess = new Chess();\n    chess.moves();\n    // -> ['a3', 'a4', 'b3', 'b4', 'c3', 'c4', 'd3', 'd4', 'e3', 'e4',\n           'f3', 'f4', 'g3', 'g4', 'h3', 'h4', 'Na3', 'Nc3', 'Nf3', 'Nh3']\n\n    chess.moves({ verbose: true });\n    // -> [{ color: 'w', from: 'a2', to: 'a3', \n             flags: 'n', piece: 'p', san 'a3'\n             # a captured: key is included when the move is a capture\n             # a promotion: key is included when the move is a promotion\n           },\n           ...\n           ]\n\nThe _piece_, _captured_, and _promotion_ fields contain the lowercase\nrepresentation of the applicable piece.\n\nThe _flags_ field in verbose mode may contain one or more of the following values:\n\n- 'n' - a non-capture\n- 'b' - a pawn push of two squares\n- 'e' - an en passant capture\n- 'c' - a standard capture\n- 'p' - a promotion \n- 'k' - kingside castling\n- 'q' - queenside castling\n\nA flag of 'pc' would mean that a pawn captured a piece on the 8th rank and promoted.\n\n### .pgn([ options ])\nReturns the game in PGN format. Options is an optional parameter which may include\nmax width and/or a newline character settings.\n\n    var chess = new Chess();\n    chess.info('White', 'Plunky', 'Black', 'Plinkie');\n    chess.move('e4');\n    chess.move('e5');\n    chess.move('Nc3');\n    chess.move('Nc6');\n\n    chess.pgn({ max_width: 5, newline_char: '<br />' });\n    // -> '[White \"Plunky\"]<br />[Black \"Plinkie\"]<br /><br />1. e4 e5<br />2. Nc3 Nc6'\n\n### .put(piece, square)\nPlace a piece on square where piece is an object with the form\n{ type: ..., color: ... }.  Returns true if piece was successfully placed,\notherwise false.\n\n    chess.clear();\n\n    chess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n    // -> true\n    chess.put({ type: 'k', color: 'w' }, 'h1') // shorthand\n    // -> true\n\n    chess.fen();\n    // -> '8/8/8/p7/8/8/8/7K w - - 0 0'\n\n### .remove(square)\nRemove and return the piece on _square_.\n\n    chess.clear();\n    chess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n    chess.put({ type: chess.KING, color: chess.WHITE }, 'h1') // put a white king on h1\n\n    chess.remove('a5');\n    // -> { type: 'p', color: 'b' },\n    chess.remove('h1');\n    // -> { type: 'k', color: 'w' },\n    chess.remove('e1');\n    // -> null\n\n### .reset()\nReset the board to the initial starting position.\n\n### .square_color(square)\nReturns the color of the square ('light' or 'dark').\n\n    var chess = Chess();\n    chess.square_color('h1')\n    // -> 'light'\n    chess.square_color('a7')\n    // -> 'dark'\n    chess.square_color('bogus square')\n    // -> null\n\n### .turn()\nReturns the current side to move.\n\n    chess.load('rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1')\n    chess.turn()\n    // -> 'b'\n\n### .undo()\nTakeback the last half-move, returning a move object if successful, otherwise null.\n    \n    var chess = new Chess();\n\n    chess.fen();\n    // -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n    chess.move('e4');\n    chess.fen();\n    // -> 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1'\n\n    chess.undo();\n    // -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\n    chess.fen();\n    // -> 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1'\n    chess.undo();\n    // -> null\n\n### .validate_fen(fen):\nReturns a validation object specifying validity or the errors found within the\nFEN string.\n\n    chess.validate_fen('2n1r3/p1k2pp1/B1p3b1/P7/5bP1/2N1B3/1P2KP2/2R5 b - - 4 25');\n    // -> { valid: true, error_number: 0, error: 'No errors.' }\n\n    chess.validate_fen('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45');\n    // -> { valid: false, error_number: 9,\n    //     error: '1st field (piece positions) is invalid [invalid piece].' }\n\n\n\n## CONTRIBUTORS\n\nSpecial thanks to the following developers for their patches and contributions:\n\n- [Steve Bragg](https://github.com/2sb18)\n- [E. Azer Ko√ßulu](https://github.com/azer)\n- [Falco Nogatz](https://github.com/fnogatz)\n\nMusical support provided by:\n\n- [The Grateful Dead](http://www.youtube.com/watch?v=YLzUme1gN8c)\n- [Umphrey's McGee](http://www.youtube.com/watch?v=jh-1fFWkSdw)\n\n\n\n## BUGS\n\n- the en passant square and castling flags aren't adjusted when using the put/remove functions (workaround: use .load() instead)\n\n\n\n## TODO\n\n- add AI (basic alpha-beta search w/ primitive position evaluation)\n- add jQuery chessboard widget\n- investigate the use of piece lists (this may shave a few cycles off generate_moves() and attacked())\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jhlywa/chess.js/issues"
  },
  "homepage": "https://github.com/jhlywa/chess.js",
  "_id": "chess.js@0.1.0",
  "dist": {
    "shasum": "98f69a3f3ef5126a2dc65f545f0d8cf3be26eccd"
  },
  "_from": "chess.js@",
  "_resolved": "https://registry.npmjs.org/chess.js/-/chess.js-0.1.0.tgz"
}

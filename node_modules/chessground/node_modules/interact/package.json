{
  "name": "interact",
  "version": "1.0.25",
  "main": "interact.js",
  "description": "Drag and drop, resizing and multi-touch gestures with inertia and snapping for modern browsers (and also IE8+)",
  "homepage": "http://interactjs.io",
  "authors": [
    {
      "name": "Taye Adeyemi",
      "email": "dev@taye.me",
      "url": "http://taye.me"
    }
  ],
  "keywords": [
    "interact.js",
    "draggable",
    "droppable",
    "drag",
    "drop",
    "drag and drop",
    "resize",
    "touch",
    "multi-touch",
    "gesture",
    "snap",
    "inertia",
    "grid",
    "autoscroll",
    "SVG"
  ],
  "license": "MIT",
  "spm": {
    "main": "interact.js",
    "ignore": [
      "test",
      "demo",
      "img",
      "docs"
    ]
  },
  "readme": "<img alt=\"interact.js\" src=\"http://interactjs.io/repo/img/ijs-anim.svg\" height=\"131px\" width=\"100%\">\n\nJavascript drag and drop, resizing and gestures for modern desktop and mobile browsers.\n\nAwesomeness includes:\n - **inertia**\n - [**snapping**](http://interactjs.io/repo/demo/snap.html) to a grid, custom\n   anchors or paths.\n - cross browser and device, supporting {Chrome,Firefox,Opera}' '{**mobile,desktop**}', ' and **Internet Explorer 8+**\n - interaction with [**SVG**](http://interactjs.io/repo/demo/star.svg) elements\n - being **standalone** (not _yet another_ jQuery plugin)\n - introducing **0 additional DOM elements**\n - having(a). **fluent** ().interface\n - **not modifying anything** it doesn't own (except to support IE8 and to\n   change the cursor (but you can disable that))\n\n## Demos\n\n - http://interactjs.io has some demos showing drag and drop, gestures,\n   ienrtia, snap and some other things.\n\n - The [html & svg demo](http://interactjs.io/demos/html_svg.html \"drag, drop,\n   resize and gesture demo\") shows div elements which can be dragged and\n   dropped onto each other and resized by dragging the botom and right edges. The\n   yellow elements are SVG elements (these won't show up on IE8).\n\n - [star.svg](http://interactjs.io/demos/star.svg \"editing an SVG document\")\n   demonstrates interact.js being used within an SVG document.\n\n - The [snapping demo](http://interactjs.io/demos/snap.html \"Oh snap!\") shows\n   how flexible the grid and anchor snapping system is and it's pretty fun.\n\n - This [blog post on path\n   snapping](http://taye.me/blog/interact-js/snap/2013/09/29/interactjs-path-snapping.html)\n   demonstrates and graphs some interesting path snapping functions.\n\ninteract.js began as a Google Summer of Code 2012 project for\n[Biographer](https://code.google.com/p/biographer \"Biographer on Google Code\"),\na biological network layout and visualization tool. It uses interact.js to\nmodify SVG elements and to pan and zoom the viewport using a mouse or touch\nscreen device.\n\nExample\n-------\n```javascript\nvar // x and y to keep the position that's been dragged to\n    x = 0,\n    y = 0,\n    // vendor prefixes (prefices?)\n    transformProp = 'transform' in document.body.style?\n                'transform': 'webkitTransform' in document.body.style?\n                    'webkitTransform': 'mozTransform' in document.body.style?\n                        'mozTransform': 'oTransform' in document.body.style?\n                            'oTransform': 'msTransform';\n\n// make an Interactable of the document body element\ninteract(document.body)\n    // make a draggable of the Interactable\n    .draggable({\n        // on(drag)move\n        // could also have done interact(document.body).draggable(true).ondragmove = function...\n        onmove: function (event) {\n            x += event.dx;\n            y += event.dy;\n\n            // translate the document body by the change in pointer position\n            document.body.style[transformProp] = 'translate(' + x + 'px, ' + y + 'px)';\n        }\n    })\n    // you should really add listeners like this if you want to add multiple listeners\n    .on('dragend', function (event) {\n        console.log('dragged a distance of ' + \n            Math.sqrt(event.dx*event.dx + event.dy*event.dy) + \n            ' pixels to ' + event.pageX + ', ' + event.pageY);\n    })\n    // allow inertia throwing\n    .inertia({\n        resistance: 15;\n    });\n    // snap to the corners of the specified grid\n    .snap({\n        mode: 'grid',\n        grid: {\n            x: 100,\n            y: 5\n        },\n        gridOffset: {\n            x: 20,\n            y: 10\n        },\n        range: Infinity // can also use -1 which gets changed to Infinity\n    });\n    \n\n// you can also listen to InteractEvents for every Interactable\ninteract.on('dragstart', function (event) {\n    console.log('starting drag from ' + event.x0 + ', ' + event.y0);\n});\n```\n\nDocumentation\n-------------\nhttp://interactjs.io/docs\n\nUsage\n-----\nPass the element you want to interact with or a CSS selector string to\n`interact`. That returns an object with methods, notably `draggable`,\n`resizable`, `gesturable`, `dropzone` which let you allow or disallow the\nrelated actions and `on` which let's you add event listeners for InteractEvents\nand any DOM event.  The `InteractEvent` types are `tap`, `doubletap`,\n{`drag`,`resize`,`gesture`}{`start`,`move`,`end`}', '\n`dragenter`, `dragleave`, `drop`, `dropactivate`, and `dropactivate`.\n\nDetails\n-------\n\n### Interactables\nThe `interact` function adds mouse or touch event listeners to the object and\nreturns an `Interactable` object which has several methods and properties to\nconfigure how it behaves and what it can do. These methods have a fluent\ninterface so method calls can be chained nicely.\n\nFor example, to make a DOM element dragagble and resizable you can call the\n`Interactable#set` with an object with the properties you want to set\n```javascript\ninteract(document.getElementById('anElement'))\n    .set({\n        draggable: true,\n        resizable: true\n    });\n```\nor you can call each {action}able method with the options for each.\n```jacascript\ninteract(document.getElementById('anElement'))\n        .draggable (true)\n        .resizable(true);\n```\n\n### Acting\nNow that the element has been made interactable, when it is clicked on or\ntouched and then dragged, an action is determined depending on the input type\nand position of the event over the element. InteractEvents are then fired as\nthe mouse/touch moves around the page until it is finally released or the\nwindow loses focus.\n\nWhen a sequence of user actions results in an InteractEvent, that event type is\nfired and all listeners of that type which were bound to that Interactable or\nbound globally are called.\n\nEven though InteractEvents are being fired, the element is not actually\nmodified by interact.js at all. To do that, you need to add listeners for\nInteractEvents either to each Interactable or globally for all Interacables and\nstyle the element according to event data.\n\n### Listening\nThe `InteractEvent` types are `tap`, `doubletap`,\n{`drag`,`resize`,`gesture`}{`start`,`move`,`end`}, `dragenter`,\n`dragleave`, `drop`, `dropactivate` and `dropactivate`.\n\nTo respond to an InteractEvent, you must add a listener for its event type\neither directly to an interactable\n`Interactable#on(eventType, listenerFunction)` or globally for all events of\nthat type `interact.on('resizemove', resizeElement)`. The InteractEvent object\nthat was created is passed to these functions as the first parameter.\n\nInteractEvent properties include the usual properties of mouse/touch events\nsuch as pageX/Y, clientX/Y, modifier keys etc. but also some properties\nproviding information about the change in cordinates and event specific data.\nThe table below displays all of these events.\n\n#### InteractEvent properties\n| Common                  |                                                   |\n| ----------------------- | --------------------------------------------------|\n| `x0`, `y0`              | Page x and y coordinates of the starting event    |\n| `clientX0`, `clientY0`  | Client x and y coordinates of the starting event  |\n| `dx`, `dy`              | Change in coordinates of the mouse/touch *        |\n| target                  | The element that is being interacted with         |\n\n| Drag                    |                                                   |\n| ----------------------- | --------------------------------------------------|\n| **dragmove**            |                                                   |\n| `dragEnter`             | The dropzone this Interactable was dragged over   |\n| `dragLeave`             | The dropzone this Interactable was dragged out of |\n| **dragenter, dragLeave**|                                                   |\n| `draggable`             | The draggable that's over this dropzone           |\n\n| Drop                    |                                                   |\n| ----------------------- | --------------------------------------------------|\n| `draggable`             | The dragagble that was dropped into this dropzone |\n\n| Resize                  |                                                   |\n| ----------------------- | --------------------------------------------------|\n| `axes`                  | The axes the resizing is constrained to (x/y/xy)  |\n\n| Gesture                 |                                                   |\n| ----------------------- | --------------------------------------------------|\n| `touches`               | The array of touches that triggered the event     |\n| `distance`              | The distance between the event's first two touches|\n| `angle`                 | The angle of the line made by the two touches     |\n| `da`                    | The change in angle since previous event          |\n| `scale`                 | The ratio of the distance of the start event to the distance of the current event |\n| `ds`                    | The change in scale since the previous event      |\n| `box`                   | A box enclosing all touch points                  |\n\n\\* In interact move events, these are the changes since the previous\nInteractEvent. However, in end events, these are the changes from the position\nof the start event to the end event. In gesture events, coordinates are the\naverages of touch coordinates.\n\n\n### Interacting\nTo move an element in response to a dragmove, a listener can be bound that\ntransforms the element accoding to `dy` and `dx` of the InteractEvent. It can\nalso be done by having the element positioned `absolute`, `fixed` or `relative`\nand adding the change in coordinates to the `top` and `left` position of the\nelement.\n\n```javascript\n\n// Set element and listen for dragmove events\ninteract(element)\n    .draggable({\n        onmove: function(event) {\n            var elementStyle = event.target.style;\n\n            // Add the change in mouse/touch coordinates to the element's current position\n            elementStyle.left =\n                parseInt(elementStyle.left) + event.dx + \"px\";\n\n            elementStyle.top =\n                parseInt(elementStyle.top) + event.dy + \"px\";\n        });\n```\n\nLicense\n-------\ninteract.js is released under the [MIT License](http://taye.mit-license.org).\n",
  "readmeFilename": "README.md",
  "_id": "interact@1.0.25",
  "dist": {
    "shasum": "0f548302ef5a40663ecb9506f3d70af2d28d629a"
  },
  "_resolved": "git://github.com/veloce/interact.js#a329855297ea5bc4ebe97dd89fd815659bfe7366",
  "_from": "interact@git://github.com/veloce/interact.js#v1.0.25"
}

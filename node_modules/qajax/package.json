{
  "name": "qajax",
  "version": "0.2.2",
  "description": "Simple Promise ajax library based on Q",
  "keywords": [
    "q",
    "promise",
    "ajax",
    "desktop"
  ],
  "author": {
    "name": "GaÃ«tan Renaudeau",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "contributors": [
    {
      "name": "Paul Panserrieu",
      "email": "paul@42loops.com",
      "url": "http://42loops.com/"
    },
    {
      "name": "Alexandre Stanislawski",
      "url": "http://bobylito.me/"
    },
    {
      "name": "Sean McMurray"
    },
    {
      "name": "Paul Dijou",
      "email": "paul.dijou+dev@gmail.com",
      "url": "http://pauldijou.com"
    }
  ],
  "dependencies": {
    "q": "1.0.x"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.6",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-docco2": "~0.1.4",
    "grunt-contrib-watch": "~0.4.4",
    "connect": "~2.8.3",
    "grunt-saucelabs": "~4.0.2",
    "grunt-contrib-connect": "~0.1.2"
  },
  "main": "src/qajax.js",
  "license": "BSD",
  "repository": {
    "type": "git",
    "url": "git://github.com/gre/qajax.git"
  },
  "readme": "Qajax\n===\nA simple Promise-based ajax library based on [Q](https://github.com/kriskowal/q).\n\n**Qajax** is a simple and pure `XMLHttpRequest` wrapper.\n\nSupported browsers\n---\n\nAll browsers are supported (including IE).\n\nCurrent master state is: [![Test Status](https://saucelabs.com/buildstatus/qajax)](https://saucelabs.com/u/qajax)\n\nInstallation\n---\n\n**Qajax** is a [NPM package](https://npmjs.org/package/qajax).\n\n```json\ndependencies: {\n  \"qajax\": \"0.2.x\"\n}\n```\n\nLinks\n---\n\n[Checkout the Annotated Source Code](http://greweb.me/qajax/docs/src/qajax.html)\n\nUsages and explanations\n---\n\n**Qajax** does not involve magic but does the strict minimum to work with **ajax** on all browsers (IE is supported!).\n\n**Qajax** has been designed using **Promise** and split up into pure functions composable with `.then`.\n\nThe `Qajax` function **just** returns a successful **Promise of XHR** when the server has returned a result - whatever the `status` code is.\n\n\nThere are 3 possible signatures:\n\n```javascript\nQajax(url: String) => Promise[XHR]\nQajax(options: Object) => Promise[XHR]\nQajax(url: String, options: Object) => Promise[XHR]\n```\n\nSimple usage:\n\n```javascript\nvar promiseOfXHR = Qajax(\"/all.json\");\n// short version of: Qajax({ url: \"/all.json\", method: \"GET\" });\n```\n\nAt this time, the promise is only rejected if the server has failed to reply to the client (network problem or timeout reached).\n\nIf you want to **filter only on success statuses**, then you need the `Qajax.filterSuccess` function:\n\n```javascript\nvar promiseOfSuccessfulXHR = \n  Qajax(\"/all.json\").then(Qajax.filterSuccess);\n```\n\nBut you can also **provide you own filter logic**:\n\n```javascript\nvar promiseOf200XHR = \n  Qajax(\"/all.json\")\n  .then(Qajax.filterStatus(function (code) {\n    return code == 200; /* only support 200 */ \n  }));\n```\n\nAnd at the end you can **map it to a JSON**:\n\n```javascript\nvar promiseOfJson = \n  Qajax(\"/all.json\")\n  .then(Qajax.filterSuccess)\n  .then(Qajax.toJSON);\n```\n\nOr you can use the getJSON shortcut for this specific use-case:\n\n```javascript\nvar promiseOfJson = Qajax.getJSON(\"/all.json\");\n```\n\nPOST & submit data\n---\n\nOf-course, you can use other HTTP Verbs like POST with **Qajax**:\n\n```javascript\nQajax({ url: \"/entry\", method: \"POST\" })\n  .then(Qajax.filterSuccess)\n  .get(\"responseText\") // using a cool Q feature here\n  .then(function (txt) {\n    console.log(\"server returned: \"+txt);\n  }, function (err) {\n    console.log(\"xhr failure: \", err);\n  });\n```\n\nYou can also submit some data as JSON:\n\n```javascript\nQajax({ url: \"/people\", method: \"POST\", data: { name: \"Gaetan\", age: 23 } })\n  .then(Qajax.filterSuccess)\n  .then(doYourSuccessStuff, displayAnError)\n  .done();\n```\n\nHelpers\n---\n\n**Qajax.serialize** helps you to deal with query string parameters:\n\n```javascript\nvar lastYearYoungPeople = \n  Qajax.getJSON(\"/people.json?\"+Qajax.serialize({ from: \"2012-01-01\", to: \"2013-01-01\", \"age$lt\": 18 }));\n  // will get from: \"/people.json?from=2012-01-01&to=2013-01-01&age%24lt=18\"\n```\n\nBut alternatively, and more simply you can give a \"params\" object:\n\n```javascript\nvar lastYearYoungPeople = \n  Qajax({\n    url: \"/people.json\",\n    // This params object will be serialized in the URL\n    params: {\n      from: \"2012-01-01\",\n      to: \"2013-01-01\",\n      \"age$lt\": 18\n    }\n  }).then(Qajax.filterSuccess).then(Qajax.toJSON);\n```\n\nMore advanced features\n---\n\n* You can get **progress** event of the Ajax download. Exemple:\n\n```javascript\nQajax(\"/download\").progress(function (xhrProgressEvent) {\n  console.log(xhrProgressEvent);\n});\n```\n\nSee also: https://dvcs.w3.org/hg/progress/raw-file/tip/Overview.html#progressevent\n\n* Qajax has a **timeout**:\n\n```javascript\nvar p = Qajax(\"/\", { timeout: 5000 });\n// p will be rejected if the server is not responding in 5 seconds.\n```\n\nThe default timeout is `Qajax.defaults.timeout` and can be overriden.\n\n* You can set XHR headers by giving the `header` options.\n\n```javascript\nvar p = Qajax({ url: \"/\", headers: { \"X-Foo\": \"bar\" } });\n```\n\n* You can give a `cancellation` Promise to abort an ajax request.\n\nHere is a typical use case:\n\n```javascript\nvar cancellationD = null;\nfunction getResults (query) {\n  if (cancellationD) {\n    cancellationD.resolve();\n  }\n  cancellationD = Q.defer();\n  return Qajax({\n    url: \"/search?\"+Qajax.serialize({ q: query }),\n    cancellation: cancellationD.promise\n  })\n  .then(Qajax.filterSuccess)\n  .then(Qajax.toJSON);\n}\n/*\n * getResults can be called typically for a typeahead,\n * it ensures it never creates 2 requests at the same time,\n * the previous xhr is aborted if still running so it let the latest query have the priority.\n */\n```\n\n* More defaults:\n  * logs: Disable/Enable the logs\n  * ie: Disable/Enable the IE support\n  * header: Global headers for all requests\n  * base: A base url for all requests\n\n\nTests\n---\n\nThe library is stress-tested with `qunit` and a mock node.js server which test different edge-cases like different HTTP code, method, server lag,...\n\n[![SauceLabs Status](https://saucelabs.com/browser-matrix/qajax.svg)](https://saucelabs.com/u/qajax)\n\nTest locally: `grunt` and go to `http://localhost:9999/test/`.\n\nDevelopment\n---\n\nInstall dev deps with ```npm install```.\nThen run ```grunt```.\n\nRelease Notes\n---\n\n**0.2.1**\n\n* Bugfix: default cache to true also set for IE11.\n  * The cache bug is still present on IE11 but the defaults.cache was only setted true for IE<=10 because of the bad detection.\n\n**0.2.0**\n\n* Remove deprecated XHR and Qajax.TIMEOUT\n* Rename `ie` default to `cache`\n* Change defaults to more logical ones: `cache` is only true on `msie` and `logs` are now disabled by default.\n* Add tests for the `params` option\n* Update some docs\n* Bugfix: The headers object was not copied and had a side-effect in `Qajax.defaults.headers`\n\n**0.1.6**\n\n* Implement the `onprogress` XHR event support using the **progress** event of the returned Promise.\n* Introduce `cancellation` parameter. It allows to provide a \"cancellation\" promise which if fulfilled will cancel the current XHR.\n* Deprecate the `xhr` parameter: use `cancellation` instead.\n\n**0.1.5**\n\n* Put global configuration variables in a `Qajax.defaults` Object.\n* Add more defaults:\n  * logs: Disable/Enable the logs\n  * ie: Disable/Enable the IE support\n  * timeout: Configure timeout for all requests\n  * header: Global headers for all requests\n  * base: A base url for all requests\n* timeout is now disabled when timeout is 0 (or null)\n\n**0.1.4**\n\n* AMD module compatibility\n\n**0.1.3**\n\n* Add new signature `Qajax(url, settings)` + validation\n\n**0.1.2**\n\n* Using require('q') properly\n\n**0.1.1**\n\n* Fix CommonJS compatibility\n\n**0.1.0**\n\n* Initial release with Qajax, filterStatus, filterSuccess, toJSON, getJSON, serialize\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gre/qajax/issues"
  },
  "homepage": "https://github.com/gre/qajax",
  "_id": "qajax@0.2.2",
  "_from": "qajax@"
}

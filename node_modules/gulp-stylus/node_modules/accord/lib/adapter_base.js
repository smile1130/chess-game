// Generated by CoffeeScript 1.7.0
(function() {
  var Adapter, File, W, _;

  File = require('fobject');

  W = require('when');

  _ = require('lodash');

  Adapter = (function() {
    function Adapter() {}

    Adapter.prototype.render = function(str, opts) {
      if (opts == null) {
        opts = {};
      }
      if (!this._render) {
        return W.reject(new Error('render not supported'));
      }
      return this._render(str, opts);
    };

    Adapter.prototype.renderFile = function(file, opts) {
      if (opts == null) {
        opts = {};
      }
      return (new File(file)).read({
        encoding: 'utf8'
      }).then(_.partialRight(this.render, _.extend(opts, {
        filename: file
      })).bind(this));
    };

    Adapter.prototype.compile = function(str, opts) {
      if (opts == null) {
        opts = {};
      }
      if (!this._compile) {
        return W.reject(new Error('compile not supported'));
      }
      return this._compile(str, opts);
    };

    Adapter.prototype.compileFile = function(file, opts) {
      if (opts == null) {
        opts = {};
      }
      return (new File(file)).read({
        encoding: 'utf8'
      }).then(_.partialRight(this.compile, _.extend(opts, {
        filename: file
      })).bind(this));
    };

    Adapter.prototype.compileClient = function(str, opts) {
      if (opts == null) {
        opts = {};
      }
      if (!this._compileClient) {
        return W.reject(new Error('client-side compile not supported'));
      }
      return this._compileClient(str, opts);
    };

    Adapter.prototype.compileFileClient = function(file, opts) {
      if (opts == null) {
        opts = {};
      }
      return (new File(file)).read({
        encoding: 'utf8'
      }).then(_.partialRight(this.compileClient, _.extend(opts, {
        filename: file
      })).bind(this));
    };

    return Adapter;

  })();

  module.exports = Adapter;

}).call(this);
